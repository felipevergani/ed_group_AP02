
// TAD Grafo usando Lista de Adjacência.
// Grupo 8.
// compilar e linkar -> gcc -std=c99 grafomain.c grafofunc.c -o teste.exe


#include <stdio.h>
#include <stdlib.h>
#define true 1
#define false 0
#include "struct.h"
typedef int bool;
typedef int TIPOPESO;

#define BRANCO 0
#define PRETO 1
#define VERMELHO 2


GRAFO *criaGrafo (int v) {
	int i;
	
	GRAFO *g = (GRAFO *)malloc(sizeof(GRAFO)); //aloca espaço para estrtura grafo
	g->vertices = v; //atualizo o numero de vertice
	g->arestas = 0;  //atualizo o numero de vertice
	g->adj = (VERTICE *)malloc(v*sizeof(VERTICE)); //ler abaixo
	//Dentro da estrturua tem só o arranjo para o ponteiro de vertice, não o arranjo em si 	
	// então aloco o arranjo com (v) o numero de vertice desejado
	for (i=0; i<v; i++){ 
		g->adj[i].cab=NULL; //coloco NULL em todas arestas
	}
	return(g);
}

ADJACENCIA *criaAdj(int v, int peso){ 
	ADJACENCIA *temp = (ADJACENCIA *) malloc (sizeof(ADJACENCIA)); //aloca espaço para um nó
	temp->vertice =v; //vertice alvo da adjacencia
	temp->peso = peso; //peso da aresta
	temp->prox = NULL; 
	return(temp); //retorno endereço da adjacencia
}

bool criaAresta(GRAFO *gr, int vi, int vf, TIPOPESO p) { //vai de vi a vf
	if(!gr) return (false);  //validações se o grafo existe 
	if((vf<0)||(vf >= gr->vertices))return(false); //validações se os valores não são neg
	if((vi<0)||(vf >= gr->vertices))return(false); //ou maiores que o numero de vértice do grafo
	
	ADJACENCIA *novo = criaAdj(vf,p); //crio adjacencia com o vértice final e o peso
	//coloco a adjacencia na lista do vértice inicial
	novo->prox = gr->adj[vi].cab; //o campo prox da adjacencia vai receber a cabeça da lista
	gr->adj[vi].cab=novo; // e a cabeça da lista passa a ser o novo elemento
	gr->arestas++; // atualizo o numero de aresta no grafo
	return (true);
}

void imprime(GRAFO *gr){
	//validações se o grafo existe 
	
	printf("Vertices: %d. Arestas: %d. \n",gr->vertices,gr->arestas); //imprime numero de vértice e arestas
	int i;
	
	for(i=0; i<gr->vertices; i++){
		printf("v%d: ",i); //Imprimo em qual aresta estou
		ADJACENCIA *ad = gr->adj[i].cab; //chamo a cabeça da lista de adjacencia desta aresta
			while(ad){ //enquanto as adjacencias não forem nula
				printf("v%d(%d) ",ad->vertice,ad->peso); //imprimo a adjacencia e seu peso
				ad=ad->prox; //passo para proxima adjacencia
			}
		printf("\n");	
	}
}

void profundida (GRAFO *gr){
	int cor[gr->vertices];//crio um vetor com arranjo de cores (o valor tem que bater com o do grafo)
	
	int u;
	for(u=0;u<gr->vertices;u++){ //inicialmente todos vérties são brancos
		cor[u] = BRANCO;
	}
	for(u=0;u<gr->vertices;u++){
		if (cor[u] == BRANCO) // se for branco visita todos em profundida
		visitaP(gr,u,cor); // repare que é recursivo, visita até o final depois volta 	
	}	
}

void visitaP(GRAFO *gr, int u, int *cor){
	cor[u] = PRETO; //visitar um nó marca como preto
	ADJACENCIA *v = gr->adj[u].cab; //visito adjacencia
	while (v){ //então visitamos sua adjacencia, aresta u e v recursivamente
		if(cor[v->vertice]==BRANCO) //se a cor for branco eu visito
		visitaP(gr,v->vertice,cor); //veja que visito chamando a função de novo, ou seja recursivo
		v = v->prox;
		printf("Vizinho: %d\n", ADJACENCIA v);
	}
	cor[u] = VERMELHO;
}